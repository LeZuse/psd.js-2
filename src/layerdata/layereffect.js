// Generated by CoffeeScript 1.6.1
(function() {
  var Log, PSDDescriptor, PSDDropDownLayerEffect, PSDEffectsDescriptor, PSDEffectsInfo, PSDLayerEffect, PSDLayerEffectCommonStateInfo, Parser, assert,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PSDDescriptor = require('../psddescriptor');

  Parser = require('../parser');

  assert = require('../psdassert');

  Log = require('../log');

  PSDEffectsInfo = (function() {

    function PSDEffectsInfo(layer, length) {
      this.layer = layer;
      this.length = length;
      this.file = this.layer.file;
    }

    PSDEffectsInfo.prototype.parse = function() {
      var descriptor, effects, effectsVersion, version;
      effectsVersion = this.file.readInt();
      assert(effectsVersion === 0);
      version = this.file.readInt();
      assert(version === 16);
      descriptor = (new PSDEffectsDescriptor(this.file)).parse();
      effects = Parser.parseEffects(descriptor);
      return effects;
    };

    PSDEffectsInfo.prototype.parseLegacy = function() {
      var count, data, effect, effects, left, pos, signature, size, type, v, _ref, _ref1;
      effects = [];
      _ref = this.file.readf(">HH"), v = _ref[0], count = _ref[1];
      while (count-- > 0) {
        _ref1 = this.file.readf(">4s4s"), signature = _ref1[0], type = _ref1[1];
        size = this.file.readf(">i")[0];
        pos = this.file.tell();
        Log.debug("Parsing effect layer with type " + type + " and size " + size);
        effect = (function() {
          switch (type) {
            case "cmnS":
              return new PSDLayerEffectCommonStateInfo(this.file);
            case "dsdw":
              return new PSDDropDownLayerEffect(this.file);
            case "isdw":
              return new PSDDropDownLayerEffect(this.file, true);
          }
        }).call(this);
        data = effect != null ? effect.parse() : void 0;
        left = (pos + size) - this.file.tell();
        if (left !== 0) {
          Log.debug("Failed to parse effect layer with type " + type);
          this.file.seek(left);
        } else {
          if (type !== "cmnS") {
            effects.push(data);
          }
        }
      }
      return {
        legacy: true,
        effects: effects
      };
    };

    return PSDEffectsInfo;

  })();

  PSDEffectsDescriptor = (function(_super) {

    __extends(PSDEffectsDescriptor, _super);

    function PSDEffectsDescriptor() {
      return PSDEffectsDescriptor.__super__.constructor.apply(this, arguments);
    }

    PSDEffectsDescriptor.prototype.parseItem = function(id) {
      var data, type;
      type = this.file.readString(4);
      data = PSDEffectsDescriptor.__super__.parseItem.call(this, id, type);
      return data;
    };

    return PSDEffectsDescriptor;

  })(PSDDescriptor);

  PSDLayerEffect = (function() {

    function PSDLayerEffect(file) {
      this.file = file;
    }

    PSDLayerEffect.prototype.parse = function() {
      var _ref;
      return _ref = this.file.readf(">i"), this.version = _ref[0], _ref;
    };

    PSDLayerEffect.prototype.getSpaceColor = function() {
      this.file.read(2);
      return this.file.readf(">HHHH");
    };

    return PSDLayerEffect;

  })();

  PSDLayerEffectCommonStateInfo = (function(_super) {

    __extends(PSDLayerEffectCommonStateInfo, _super);

    function PSDLayerEffectCommonStateInfo() {
      return PSDLayerEffectCommonStateInfo.__super__.constructor.apply(this, arguments);
    }

    PSDLayerEffectCommonStateInfo.prototype.parse = function() {
      PSDLayerEffectCommonStateInfo.__super__.parse.call(this);
      this.visible = this.file.readBoolean();
      this.file.read(2);
      return {
        visible: this.visible
      };
    };

    return PSDLayerEffectCommonStateInfo;

  })(PSDLayerEffect);

  PSDDropDownLayerEffect = (function(_super) {

    __extends(PSDDropDownLayerEffect, _super);

    function PSDDropDownLayerEffect(file, inner) {
      this.inner = inner != null ? inner : false;
      PSDDropDownLayerEffect.__super__.constructor.call(this, file);
      this.blendMode = "mul";
      this.color = this.nativeColor = [0, 0, 0, 0];
      this.opacity = 191;
      this.angle = 120;
      this.useGlobalLight = true;
      this.distance = 5;
      this.spread = 0;
      this.size = 5;
      this.antiAliased = false;
      this.knocksOut = false;
    }

    PSDDropDownLayerEffect.prototype.parse = function() {
      var data, key, opacity_value, val, _ref, _ref1;
      PSDDropDownLayerEffect.__super__.parse.call(this);
      _ref = this.file.readf(">hiii"), this.blur = _ref[0], this.intensity = _ref[1], this.angle = _ref[2], this.distance = _ref[3];
      this.file.read(2);
      this.color = this.getSpaceColor();
      _ref1 = this.file.readf(">4s4s"), this.signature = _ref1[0], this.blendMode = _ref1[1];
      this.enabled = this.file.readBoolean();
      this.useAngleInAllFX = this.file.readBoolean();
      opacity_value = this.file.read(1)[0];
      this.opacity = Math.round(opacity_value * 100 / 255);
      if (this.version === 2) {
        this.nativeColor = this.getSpaceColor();
      }
      data = {};
      for (key in this) {
        if (!__hasProp.call(this, key)) continue;
        val = this[key];
        if (key === "file") {
          continue;
        }
        data[key] = val;
      }
      return data;
    };

    return PSDDropDownLayerEffect;

  })(PSDLayerEffect);

  module.exports = PSDEffectsInfo;

}).call(this);
