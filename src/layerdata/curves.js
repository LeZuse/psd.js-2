// Generated by CoffeeScript 1.6.1
(function() {
  var PSDCurves, assert;

  assert = require('../psdassert');

  PSDCurves = (function() {

    function PSDCurves(layer, length) {
      this.layer = layer;
      this.length = length;
      this.file = this.layer.file;
      this.data = {
        curve: []
      };
    }

    PSDCurves.prototype.parse = function() {
      var count, curveCount, i, inputValue, j, outputValue, pointCount, start, tag, version, _i, _j, _k, _l, _m, _n, _ref, _ref1, _ref2;
      start = this.file.tell();
      this.file.seek(1);
      version = this.file.readShortInt();
      assert(version === 1 || version === 4);
      tag = this.file.readInt();
      this.data.curveCount = 0;
      for (i = _i = 0; _i < 32; i = ++_i) {
        if (tag & (1 << i)) {
          this.data.curveCount++;
        }
      }
      for (i = _j = 0, _ref = this.data.curveCount; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
        count = 0;
        for (j = _k = 0; _k < 32; j = ++_k) {
          if (tag & (1 << j)) {
            if (count === i) {
              this.data.curve[i] = {
                channelIndex: j
              };
              break;
            }
            count++;
          }
        }
        this.data.curve[i].pointCount = this.file.readShortInt();
        assert(this.data.curve[i].pointCount >= 2);
        assert(this.data.curve[i].pointCount <= 19);
        for (j = _l = 0, _ref1 = this.data.curve[i].pointCount; 0 <= _ref1 ? _l < _ref1 : _l > _ref1; j = 0 <= _ref1 ? ++_l : --_l) {
          if (this.data.curve[i].outputValue == null) {
            this.data.curve[i].outputValue = [];
          }
          if (this.data.curve[i].inputValue == null) {
            this.data.curve[i].inputValue = [];
          }
          this.data.curve[i].outputValue[j] = this.file.readShortInt();
          this.data.curve[i].inputValue[j] = this.file.readShortInt();
          assert(this.data.curve[i].outputValue[j] >= 0);
          assert(this.data.curve[i].outputValue[j] <= 255);
          assert(this.data.curve[i].inputValue[j] >= 0);
          assert(this.data.curve[i].inputValue[j] <= 255);
        }
      }
      if (this.file.tell() - start < this.length - 4) {
        tag = this.file.readString(4);
        assert.equal(tag, 'Crv ');
        version = this.file.readShortInt();
        assert(version === 4);
        curveCount = this.file.readInt();
        assert.equal(curveCount, this.data.curveCount);
        for (i = _m = 0, _ref2 = this.data.curveCount; 0 <= _ref2 ? _m < _ref2 : _m > _ref2; i = 0 <= _ref2 ? ++_m : --_m) {
          this.data.curve[i].channelIndex = this.file.readShortInt();
          pointCount = this.file.readShortInt();
          assert(pointCount === this.data.curve[i].pointCount);
          for (j = _n = 0; 0 <= pointCount ? _n < pointCount : _n > pointCount; j = 0 <= pointCount ? ++_n : --_n) {
            outputValue = this.file.readShortInt();
            inputValue = this.file.readShortInt();
            assert.equal(outputValue, this.data.curve[i].outputValue[j]);
            assert.equal(inputValue, this.data.curve[i].inputValue[j]);
          }
        }
      }
      return this.data;
    };

    return PSDCurves;

  })();

  module.exports = PSDCurves;

}).call(this);
