// Generated by CoffeeScript 1.6.1
(function() {
  var Log, PSD, PSDFile, PSDHeader, PSDImage, PSDLayerMask, PSDResource, fs,
    __hasProp = {}.hasOwnProperty;

  fs = require('fs');

  PSDFile = require('./psdfile');

  PSDHeader = require('./psdheader');

  PSDResource = require('./psdresource');

  PSDLayerMask = require('./psdlayermask');

  PSDImage = require('./psdimage');

  Log = require('./log');

  PSD = (function() {

    PSD.VERSION = "0.4.5";

    PSD.DEBUG = false;

    PSD.fromFile = function(file, cb) {
      var data, reader;
      if (cb == null) {
        cb = function() {};
      }
      if (typeof exports !== "undefined" && exports !== null) {
        data = fs.readFileSync(file);
        return new PSD(data);
      } else {
        reader = new FileReader();
        reader.onload = function(f) {
          var bytes, psd;
          bytes = new Uint8Array(f.target.result);
          psd = new PSD(bytes);
          return cb(psd);
        };
        return reader.readAsArrayBuffer(file);
      }
    };

    PSD.fromURL = function(url, cb) {
      var xhr;
      if (cb == null) {
        cb = function() {};
      }
      xhr = new XMLHttpRequest;
      xhr.open("GET", url, true);
      xhr.responseType = "arraybuffer";
      xhr.onload = function() {
        var data, psd;
        data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);
        psd = new PSD(data);
        return cb(psd);
      };
      return xhr.send(null);
    };

    PSD.prototype.options = {
      layerImages: false,
      onlyVisibleLayers: false
    };

    function PSD(data) {
      this.file = new PSDFile(data);
      this.header = null;
      this.resources = null;
      this.layerMask = null;
      this.layers = null;
      this.images = null;
      this.image = null;
    }

    PSD.prototype.setOptions = function(options) {
      var key, val, _results;
      _results = [];
      for (key in options) {
        if (!__hasProp.call(options, key)) continue;
        val = options[key];
        _results.push(this.options[key] = val);
      }
      return _results;
    };

    PSD.prototype.parse = function() {
      Log.debug("Beginning parsing");
      this.startTime = (new Date()).getTime();
      this.parseHeader();
      this.parseImageResources();
      this.parseLayersMasks();
      this.parseImageData();
      this.endTime = (new Date()).getTime();
      return Log.debug("Parsing finished in " + (this.endTime - this.startTime) + "ms");
    };

    PSD.prototype.parseHeader = function() {
      Log.debug("\n### Header ###");
      this.header = new PSDHeader(this.file);
      this.header.parse();
      return Log.debug(this.header);
    };

    PSD.prototype.parseImageResources = function(skip) {
      var length, n, pos, resource, start;
      if (skip == null) {
        skip = false;
      }
      Log.debug("\n### Resources ###");
      this.resources = [];
      n = this.file.readInt();
      length = n;
      if (skip) {
        Log.debug("Skipped!");
        return this.file.seek(n);
      }
      start = this.file.tell();
      while (n > 0) {
        pos = this.file.tell();
        resource = new PSDResource(this.file);
        resource.parse();
        n -= this.file.tell() - pos;
        this.resources.push(resource);
        Log.debug("Resource: ", resource);
      }
      if (n !== 0) {
        Log.debug("Image resources overran expected size by " + (-n) + " bytes");
        return this.file.seek(start + length);
      }
    };

    PSD.prototype.parseLayersMasks = function(skip) {
      if (skip == null) {
        skip = false;
      }
      if (!this.header) {
        this.parseHeader();
      }
      if (!this.resources) {
        this.parseImageResources(true);
      }
      Log.debug("\n### Layers & Masks ###");
      this.layerMask = new PSDLayerMask(this.file, this.header, this.options);
      this.layers = this.layerMask.layers;
      if (skip) {
        Log.debug("Skipped!");
        return this.layerMask.skip();
      } else {
        return this.layerMask.parse();
      }
    };

    PSD.prototype.parseImageData = function() {
      if (!this.header) {
        this.parseHeader();
      }
      if (!this.resources) {
        this.parseImageResources(true);
      }
      if (!this.layerMask) {
        this.parseLayersMasks(true);
      }
      this.image = new PSDImage(this.file, this.header);
      return this.image.parse();
    };

    PSD.prototype.getLayerStructure = function() {
      var layer, parseStack, result, temp, _i, _len, _ref;
      if (!this.layerMask) {
        this.parseLayersMasks();
      }
      result = {
        layers: []
      };
      parseStack = [];
      _ref = this.layers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        if (layer.isFolder) {
          parseStack.push(result);
          result = {
            name: layer.name,
            layers: []
          };
        } else if (layer.isHidden) {
          temp = result;
          result = parseStack.pop();
          result.layers.push(temp);
        } else {
          result.layers.push(layer);
        }
      }
      return result;
    };

    PSD.prototype.hasClippingLayers = function() {
      var clipping, layer, _i, _len, _ref;
      if (!this.layers) {
        return null;
      }
      clipping = 0;
      _ref = this.layers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        if (layer.blendMode.clipping === 1) {
          clipping++;
        }
      }
      return clipping > 0;
    };

    PSD.prototype.toFile = function(filename, cb) {
      if (cb == null) {
        cb = function() {};
      }
      if (!this.image) {
        this.parseImageData();
      }
      return this.image.toFile(filename, cb);
    };

    PSD.prototype.toFileSync = function(filename) {
      if (!this.image) {
        this.parseImageData();
      }
      return this.image.toFileSync(filename);
    };

    PSD.prototype.toCanvas = function(canvas, width, height) {
      if (width == null) {
        width = null;
      }
      if (height == null) {
        height = null;
      }
      if (!this.image) {
        this.parseImageData();
      }
      return this.image.toCanvas(canvas, width, height);
    };

    PSD.prototype.toImage = function() {
      if (!this.image) {
        this.parseImageData();
      }
      return this.image.toImage();
    };

    PSD.prototype.toJSON = function() {
      var data, section, sections, _i, _len;
      if (!this.layerMask) {
        this.parseLayersMasks();
      }
      sections = ['header', 'layerMask'];
      data = {};
      for (_i = 0, _len = sections.length; _i < _len; _i++) {
        section = sections[_i];
        data[section] = this[section].toJSON();
      }
      return data;
    };

    return PSD;

  })();

  module.exports = PSD;

}).call(this);
