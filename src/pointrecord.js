// Generated by CoffeeScript 1.6.1
(function() {
  var PointRecord;

  PointRecord = (function() {

    function PointRecord(subPathItem) {
      this.right_point = subPathItem[0];
      this.anchor_point = subPathItem[1];
      this.left_point = subPathItem[2];
    }

    PointRecord.prototype.isPoint = function() {
      var x1, x2, x3, y1, y2, y3;
      x1 = this.right_point.x;
      x2 = this.anchor_point.x;
      x3 = this.left_point.x;
      y1 = this.right_point.y;
      y2 = this.anchor_point.y;
      y3 = this.left_point.y;
      return x1 === x2 && x2 === x3 && y1 === y2 && y2 === y3;
    };

    PointRecord.prototype.toPoint = function() {
      if (this.isPoint()) {
        return this.anchor_point;
      }
    };

    PointRecord.prototype.isCurvedLeft = function() {
      return (this.left_point.x !== this.anchor_point.x) || (this.left_point.y !== this.anchor_point.y);
    };

    PointRecord.prototype.isCurvedRight = function() {
      return (this.right_point.x !== this.anchor_point.x) || (this.right_point.y !== this.anchor_point.y);
    };

    PointRecord.prototype.isCurvedLeftOnly = function() {
      return this.isCurvedLeft() && !this.isCurvedRight();
    };

    PointRecord.prototype.isCurvedRightOnly = function() {
      return this.isCurvedRight() && !this.isCurvedLeft();
    };

    PointRecord.prototype.isCurvedBoth = function() {
      return this.isCurvedLeft() && this.isCurvedRight();
    };

    PointRecord.prototype.isAbcissalCurvature = function() {
      var xs;
      xs = [this.right_point.x, this.anchor_point.x, this.left_point.x];
      return (xs[0] > xs[1] && xs[1] >= xs[2]) || (xs[0] < xs[1] && xs[1] < xs[2]);
    };

    PointRecord.prototype.isOrdinatalCurvature = function() {
      var ys;
      ys = [this.right_point.y, this.anchor_point.y, this.left_point.y];
      return (ys[0] > ys[1] && ys[1] > ys[2]) || (ys[0] < ys[1] && ys[1] < ys[2]);
    };

    PointRecord.prototype.getCurvature = function() {
      var changing_point, curvature;
      if (this.isPoint()) {
        return 0;
      }
      curvature = -1;
      if (this.isCurvedBoth()) {
        if (this.isOrdinatalCurvature()) {
          curvature = (Math.abs(this.right_point.y - this.anchor_point.y) + Math.abs(this.anchor_point.y - this.left_point.y)) / 2;
        } else if (this.isAbcissalCurvature()) {
          curvature = (Math.abs(this.right_point.x - this.anchor_point.x) + Math.abs(this.anchor_point.x - this.left_point.x)) / 2;
        }
      } else {
        changing_point = null;
        if (this.isCurvedRightOnly()) {
          changing_point = this.right_point;
        } else {
          changing_point = this.left_point;
        }
        if (changing_point.y !== this.anchor_point.y) {
          curvature = Math.abs(changing_point.y - this.anchor_point.y);
        } else if (changing_point.x !== this.anchor_point.x) {
          curvature = Math.abs(changing_point.x - this.anchor_point.x);
        }
      }
      return Math.round(curvature);
    };

    PointRecord.prototype.isPerpendicular = function(otherSubPathItem) {
      var flag1, flag2;
      flag1 = this.isAbcissalCurvature() && otherSubPathItem.isOrdinatalCurvature();
      flag2 = this.isOrdinatalCurvature() && otherSubPathItem.isAbcissalCurvature();
      return flag1 || flag2;
    };

    return PointRecord;

  })();

  module.exports = PointRecord;

}).call(this);
