// Generated by CoffeeScript 1.6.1
(function() {
  var JSPack, Log, PSDFile;

  JSPack = require('../deps/jspack');

  Log = require('./log');

  PSDFile = (function() {

    PSDFile.prototype.unicodeRegex = /\\u([\d\w]{4})/gi;

    function PSDFile(data) {
      this.data = data;
      this.pos = 0;
    }

    PSDFile.prototype.tell = function() {
      return this.pos;
    };

    PSDFile.prototype.read = function(bytes) {
      var i, _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= bytes ? _i < bytes : _i > bytes; i = 0 <= bytes ? ++_i : --_i) {
        _results.push(this.data[this.pos++]);
      }
      return _results;
    };

    PSDFile.prototype.seek = function(amount, rel) {
      if (rel == null) {
        rel = true;
      }
      if (rel) {
        return this.pos += amount;
      } else {
        return this.pos = amount;
      }
    };

    PSDFile.prototype.readInt = function() {
      var int;
      int = this.readUInt();
      if (int >= 0x80000000) {
        return int - 0x100000000;
      } else {
        return int;
      }
    };

    PSDFile.prototype.readUInt = function() {
      var b1, b2, b3, b4;
      b1 = this.read(1)[0] << 24;
      b2 = this.read(1)[0] << 16;
      b3 = this.read(1)[0] << 8;
      b4 = this.read(1)[0];
      return b1 | b2 | b3 | b4;
    };

    PSDFile.prototype.readShortInt = function() {
      var int;
      int = this.readShortUInt();
      if (int >= 0x8000) {
        return int - 0x10000;
      } else {
        return int;
      }
    };

    PSDFile.prototype.readShortUInt = function() {
      var b1, b2;
      b1 = this.read(1)[0] << 8;
      b2 = this.read(1)[0];
      return b1 | b2;
    };

    PSDFile.prototype.readLongInt = function() {
      return this.readf(">l")[0];
    };

    PSDFile.prototype.readLongUInt = function() {
      return this.readf(">L")[0];
    };

    PSDFile.prototype.readDouble = function() {
      return this.readf(">d")[0];
    };

    PSDFile.prototype.readBoolean = function() {
      return this.read(1)[0] !== 0;
    };

    PSDFile.prototype.readLongLong = function() {
      return this.read(8);
    };

    PSDFile.prototype.readULongLong = function() {
      return this.read(8);
    };

    PSDFile.prototype.readString = function(length) {
      var ret;
      ret = String.fromCharCode.apply(null, this.read(length));
      return ret.replace(/\u0000/g, "");
    };

    PSDFile.prototype.readUnicodeString = function() {
      var len, str;
      len = this.readInt() * 2;
      str = this.readf(">" + len + "s")[0];
      str = str.replace(this.unicodeRegex, function(match, grp) {
        return String.fromCharCode(parseInt(grp, 16));
      });
      return str.replace(/\u0000/g, "");
    };

    PSDFile.prototype.readLengthWithString = function(defaultLen) {
      var length, str;
      if (defaultLen == null) {
        defaultLen = 4;
      }
      length = this.read(1)[0];
      if (length === 0) {
        str = this.readString(defaultLen);
      } else {
        str = this.readString(length);
      }
      return str;
    };

    PSDFile.prototype.readBytesList = function(size) {
      return this.read(size);
    };

    PSDFile.prototype.readSpaceColor = function() {
      var colorComponent, colorSpace, i, _i;
      colorSpace = this.readShortInt();
      colorComponent = [];
      for (i = _i = 0; _i < 4; i = ++_i) {
        colorComponent.push(this.readShortInt() >> 8);
      }
      return PSDColor.colorSpaceToARGB(colorSpace, colorComponent);
    };

    PSDFile.prototype.readf = function(format) {
      var jspack;
      jspack = new JSPack();
      return jspack.Unpack(format, this.read(jspack.CalcLength(format)));
    };

    PSDFile.prototype.skipBlock = function(desc) {
      var n;
      if (desc == null) {
        desc = "unknown";
      }
      n = this.readf('>L')[0];
      if (n) {
        this.seek(n);
      }
      return Log.debug("Skipped " + desc + " with " + n + " bytes");
    };

    return PSDFile;

  })();

  module.exports = PSDFile;

}).call(this);
