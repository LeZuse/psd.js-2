// Generated by CoffeeScript 1.6.1
(function() {
  var PSDColor, Util;

  Util = require('./util');

  PSDColor = (function() {

    function PSDColor() {}

    PSDColor.hexToRGB = function(hex) {
      var b, g, r;
      if (hex.charAt(0) === "#") {
        hex = hex.substr(1);
      }
      r = parseInt(hex.substr(0, 2), 16);
      g = parseInt(hex.substr(2, 2), 16);
      b = parseInt(hex.substr(4, 2), 16);
      return {
        r: r,
        g: g,
        b: b
      };
    };

    PSDColor.rgbToHex = function(c) {
      var m;
      if (arguments.length === 1) {
        m = /rgba?\((\d+), (\d+), (\d+)/.exec(c);
      } else {
        m = Array.prototype.slice.call(arguments);
        m.unshift(0);
      }
      if (m) {
        return '#' + (m[1] << 16 | m[2] << 8 | m[3]).toString(16);
      } else {
        return c;
      }
    };

    PSDColor.rgbToHSL = function(r, g, b) {
      var d, h, l, max, min, s;
      r /= 255;
      g /= 255;
      b /= 255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      l = (max + min) / 2;
      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = (function() {
          switch (max) {
            case r:
              return (g - b) / d + (g < b ? 6 : 0);
            case g:
              return (b - r) / d + 2;
            case b:
              return (r - g) / d + 4;
          }
        })();
        h /= 6;
      }
      return {
        h: Util.round(h, 3),
        s: Util.round(s, 3),
        l: Util.round(l, 3)
      };
    };

    PSDColor.hslToRGB = function(h, s, l) {
      var b, g, p, q, r;
      if (s === 0) {
        r = g = b = l;
      } else {
        q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        p = 2 * l - q;
        r = this.hueToRGB(p, q, h + 1 / 3);
        g = this.hueToRGB(p, q, h);
        b = this.hueToRGB(p, q, h - 1 / 3);
      }
      r *= 255;
      g *= 255;
      b *= 255;
      return {
        r: Math.round(r),
        g: Math.round(g),
        b: Math.round(b)
      };
    };

    PSDColor.hueToRGB = function(p, q, t) {
      if (t < 0) {
        t += 1;
      }
      if (t > 1) {
        t -= 1;
      }
      if (t < 1 / 6) {
        return p + (q - p) * 6 * t;
      }
      if (t < 1 / 2) {
        return q;
      }
      if (t < 2 / 3) {
        return p + (q - p) * (2 / 3 - t) * 6;
      }
      return p;
    };

    PSDColor.rgbToHSV = function(r, g, b) {
      var d, h, max, min, s, v;
      r /= 255;
      g /= 255;
      b /= 255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      v = max;
      d = max - min;
      s = max === 0 ? 0 : d / max;
      if (max === min) {
        h = 0;
      } else {
        h = (function() {
          switch (max) {
            case r:
              return (g - b) / d + (g < b ? 6 : 0);
            case g:
              return (b - r) / d + 2;
            case b:
              return (r - g) / d + 4;
          }
        })();
        h /= 6;
      }
      return {
        h: h,
        s: s,
        v: v
      };
    };

    PSDColor.hsvToRGB = function(h, s, v) {
      var b, f, g, i, p, q, r, t;
      i = Math.floor(h * 6);
      f = h * 6 - i;
      p = v * (1 - s);
      q = v * (1 - f * s);
      t = v * (1 - (1 - f) * s);
      switch (i % 6) {
        case 0:
          r = v;
          g = t;
          b = p;
          break;
        case 1:
          r = q;
          g = v;
          b = p;
          break;
        case 2:
          r = p;
          g = v;
          b = t;
          break;
        case 3:
          r = p;
          g = q;
          b = v;
          break;
        case 4:
          r = t;
          g = p;
          b = v;
          break;
        case 5:
          r = v;
          g = p;
          b = q;
      }
      return Util.clamp({
        r: r * 255,
        g: g * 255,
        b: b * 255
      }, 0, 255);
    };

    PSDColor.rgbToXYZ = function(r, g, b) {
      var x, y, z;
      r /= 255;
      g /= 255;
      b /= 255;
      if (r > 0.04045) {
        r = Math.pow((r + 0.055) / 1.055, 2.4);
      } else {
        r /= 12.92;
      }
      if (g > 0.04045) {
        g = Math.pow((g + 0.055) / 1.055, 2.4);
      } else {
        g /= 12.92;
      }
      if (b > 0.04045) {
        b = Math.pow((b + 0.055) / 1.055, 2.4);
      } else {
        b /= 12.92;
      }
      x = r * 0.4124 + g * 0.3576 + b * 0.1805;
      y = r * 0.2126 + g * 0.7152 + b * 0.0722;
      z = r * 0.0193 + g * 0.1192 + b * 0.9505;
      return {
        x: x * 100,
        y: y * 100,
        z: z * 100
      };
    };

    PSDColor.xyzToRGB = function(x, y, z) {
      var b, g, r;
      x /= 100;
      y /= 100;
      z /= 100;
      r = (3.2406 * x) + (-1.5372 * y) + (-0.4986 * z);
      g = (-0.9689 * x) + (1.8758 * y) + (0.0415 * z);
      b = (0.0557 * x) + (-0.2040 * y) + (1.0570 * z);
      if (r > 0.0031308) {
        r = (1.055 * Math.pow(r, 0.4166666667)) - 0.055;
      } else {
        r *= 12.92;
      }
      if (g > 0.0031308) {
        g = (1.055 * Math.pow(g, 0.4166666667)) - 0.055;
      } else {
        g *= 12.92;
      }
      if (b > 0.0031308) {
        b = (1.055 * Math.pow(b, 0.4166666667)) - 0.055;
      } else {
        b *= 12.92;
      }
      return Util.clamp({
        r: r * 255,
        g: g * 255,
        b: b * 255
      }, 0, 255);
    };

    PSDColor.xyzToLab = function(x, y, z) {
      var a, b, l, whiteX, whiteY, whiteZ;
      whiteX = 95.047;
      whiteY = 100.0;
      whiteZ = 108.883;
      x /= whiteX;
      y /= whiteY;
      z /= whiteZ;
      if (x > 0.008856451679) {
        x = Math.pow(x, 0.3333333333);
      } else {
        x = (7.787037037 * x) + 0.1379310345;
      }
      if (y > 0.008856451679) {
        y = Math.pow(y, 0.3333333333);
      } else {
        y = (7.787037037 * y) + 0.1379310345;
      }
      if (z > 0.008856451679) {
        z = Math.pow(z, 0.3333333333);
      } else {
        z = (7.787037037 * z) + 0.1379310345;
      }
      l = 116 * y - 16;
      a = 500 * (x - y);
      b = 200 * (y - z);
      return {
        l: l,
        a: a,
        b: b
      };
    };

    PSDColor.labToXYZ = function(l, a, b) {
      var x, y, z;
      y = (l + 16) / 116;
      x = y + (a / 500);
      z = y - (b / 200);
      if (Math.pow(x, 3) > 0.008856) {
        x = Math.pow(x, 3);
      } else {
        x = (x - 16 / 116) / 7.787;
      }
      if (Math.pow(y, 3) > 0.008856) {
        y = Math.pow(y, 3);
      } else {
        y = (y - 16 / 116) / 7.787;
      }
      if (Math.pow(z, 3) > 0.008856) {
        z = Math.pow(z, 3);
      } else {
        z = (z - 16 / 116) / 7.787;
      }
      return {
        x: x * 95.047,
        y: y * 100.0,
        z: z * 108.883
      };
    };

    PSDColor.labToRGB = function(l, a, b) {
      var xyz;
      xyz = this.labToXYZ(l, a, b);
      return Util.clamp(this.xyzToRGB(xyz.x, xyz.y, xyz.z), 0, 255);
    };

    PSDColor.cmykToRGB = function(c, m, y, k) {
      var b, g, r;
      r = (65535 - (c * (255 - k) + (k << 8))) >> 8;
      g = (65535 - (m * (255 - k) + (k << 8))) >> 8;
      b = (65535 - (y * (255 - k) + (k << 8))) >> 8;
      return Util.clamp({
        r: r,
        g: g,
        b: b
      }, 0, 255);
    };

    PSDColor.rgbToColor = function(r, g, b) {
      return this.argbToColor(255, r, g, b);
    };

    PSDColor.argbToColor = function(a, r, g, b) {
      return (alpha << 24) | (r << 16) | (g << 8) | b;
    };

    PSDColor.hsbToColor = function(h, s, b) {
      return this.ahsbToColor(255, h, s, b);
    };

    PSDColor.ahsbToColor = function(alpha, hue, saturation, brightness) {
      var b, g, m1, m2, r;
      if (saturation === 0) {
        b = g = r = 255 * brightness;
      } else {
        if (brightness <= 0.5) {
          m2 = brightness * (1 + saturation);
        } else {
          m2 = brightness + saturation - brightness * saturation;
        }
        m1 = 2 * brightness - m2;
        r = this.hueToColor(hue + 120, m1, m2);
        g = this.hueToColor(hue, m1, m2);
        b = this.hueToColor(hue - 120, m1, m2);
      }
      return this.argbToColor(alpha, r, g, b);
    };

    PSDColor.hueToColor = function(hue, m1, m2) {
      var v;
      hue %= 360;
      if (hue < 60) {
        v = m1 + (m2 - m1) * hue / 60;
      } else if (hue < 180) {
        v = m2;
      } else if (hue < 240) {
        v = m1 + (m2 - m1) * (240 - hue) / 60;
      } else {
        v = m1;
      }
      return v * 255;
    };

    PSDColor.cmykToColor = function(cyan, magenta, yellow, black) {
      var b, g, r;
      r = 1 - (cyan * (1 - black) + black) * 255;
      g = 1 - (magenta * (1 - black) + black) * 255;
      b = 1 - (yellow * (1 - black) + black) * 255;
      r = Util.clamp(r, 0, 255);
      g = Util.clamp(g, 0, 255);
      b = Util.clamp(b, 0, 255);
      return this.rgbToColor(r, g, b);
    };

    PSDColor.labToColor = function(l, a, b) {
      return this.alabToColor(255, l, a, b);
    };

    PSDColor.alabToColor = function(alpha, lightness, a, b) {
      var xyz;
      xyz = this.labToXYZ(lightness, a, b);
      return this.axyzToColor(alpha, xyz.x, xyz.y, xyz.z);
    };

    PSDColor.axyzToColor = function(alpha, x, y, z) {
      var rgb;
      rgb = this.xyzToRGB(x, y, z);
      return this.argbToColor(alpha, rgb.r, rgb.g, rgb.b);
    };

    PSDColor.colorSpaceToARGB = function(colorSpace, colorComponent) {
      var dstColor;
      switch (colorSpace) {
        case 0:
          dstColor = this.rgbToColor(colorComponent[0], colorComponent[1], colorComponent[2]);
          break;
        case 1:
          dstColor = this.hsbToColor(colorComponent[0], colorComponent[1] / 100.0, colorComponent[2] / 100.0);
          break;
        case 2:
          dstColor = this.cmykToColor(colorComponent[0] / 100.0, colorComponent[1] / 100.0, colorComponent[2] / 100.0, colorComponent[3] / 100.0);
          break;
        case 7:
          dstColor = this.labToColor(colorComponent[0], colorComponent[1], colorComponent[2]);
          break;
        default:
          dstColor = 0x00FFFFFF;
      }
      return dstColor;
    };

    return PSDColor;

  })();

  module.exports = PSDColor;

}).call(this);
