// Generated by CoffeeScript 1.6.1
(function() {
  var Log, PSDConstants, PSDDescriptor;

  Log = require('./log');

  PSDConstants = require('./psdconstants');

  PSDDescriptor = (function() {

    function PSDDescriptor(file) {
      this.file = file;
    }

    PSDDescriptor.prototype.parse = function() {
      var constants, data, i, item, item_key, numItems, _i;
      Log.debug("Parsing descriptor...");
      data = {};
      data["class"] = this.parseClass();
      numItems = this.file.readInt();
      Log.debug("Descriptor contains " + numItems + " items");
      constants = PSDConstants.CONSTANTS;
      for (i = _i = 0; 0 <= numItems ? _i < numItems : _i > numItems; i = 0 <= numItems ? ++_i : --_i) {
        item = this.parseKeyItem();
        item_key = constants[item.id];
        if (item_key != null) {
          data[item_key] = item.value;
        } else {
          data[item.id] = item.value;
        }
      }
      return data;
    };

    PSDDescriptor.prototype.parseID = function() {
      var len;
      len = this.file.readInt();
      if (len === 0) {
        return this.file.readInt();
      } else {
        return this.file.readString(len);
      }
    };

    PSDDescriptor.prototype.parseClass = function() {
      return {
        name: this.file.readUnicodeString(),
        id: this.parseID()
      };
    };

    PSDDescriptor.prototype.parseKeyItem = function() {
      var id, value;
      id = this.parseID();
      value = this.parseItem(id);
      return {
        id: id,
        value: value
      };
    };

    PSDDescriptor.prototype.parseItem = function(id, type) {
      var value;
      if (type == null) {
        type = null;
      }
      if (!type) {
        type = this.file.readString(4);
      }
      Log.debug("Found descriptor type: " + type);
      value = (function() {
        switch (type) {
          case 'bool':
            return this.parseBoolean();
          case 'type':
          case 'GlbC':
            return this.parseClass();
          case 'Objc':
          case 'GlbO':
            return this.parse();
          case 'doub':
            return this.parseDouble();
          case 'enum':
            return this.parseEnum();
          case 'alis':
            return this.parseAlias();
          case 'Pth ':
            return this.parseFilePath();
          case 'long':
            return this.parseInteger();
          case 'comp':
            return this.parseLargeInteger();
          case 'VlLs':
            return this.parseList();
          case 'ObAr':
            return this.parseObjectArray();
          case 'tdta':
            return this.parseRawData();
          case 'obj ':
            return this.parseReference();
          case 'TEXT':
            return this.file.readUnicodeString();
          case 'UntF':
            return this.parseUnitDouble();
        }
      }).call(this);
      return value;
    };

    PSDDescriptor.prototype.parseBoolean = function() {
      return this.file.readBoolean();
    };

    PSDDescriptor.prototype.parseDouble = function() {
      return this.file.readDouble();
    };

    PSDDescriptor.prototype.parseInteger = function() {
      return this.file.readInt();
    };

    PSDDescriptor.prototype.parseLargeInteger = function() {
      return this.file.readLongLong();
    };

    PSDDescriptor.prototype.parseIdentifier = function() {
      return this.file.readInt();
    };

    PSDDescriptor.prototype.parseIndex = function() {
      return this.file.readInt();
    };

    PSDDescriptor.prototype.parseOffset = function() {
      return this.file.readInt();
    };

    PSDDescriptor.prototype.parseProperty = function() {
      return this.parseID();
    };

    PSDDescriptor.prototype.parseEnum = function() {
      this.parseID();
      return this.parseID();
    };

    PSDDescriptor.prototype.parseAlias = function() {
      var len;
      len = this.file.readInt();
      return this.file.read(len);
    };

    PSDDescriptor.prototype.parseFilePath = function() {
      var charBytes, len, numChars, path, pathSize, sig, _ref;
      len = this.file.readInt();
      _ref = this.file.readf("<4s2i"), sig = _ref[0], pathSize = _ref[1], numChars = _ref[2];
      charBytes = numChars * 2;
      path = this.file.read(charBytes);
      return {
        sig: sig,
        path: path
      };
    };

    PSDDescriptor.prototype.parseList = function() {
      var i, items, numItems, _i;
      numItems = this.file.readInt();
      items = [];
      for (i = _i = 0; 0 <= numItems ? _i < numItems : _i > numItems; i = 0 <= numItems ? ++_i : --_i) {
        items.push(this.parseItem());
      }
      return items;
    };

    PSDDescriptor.prototype.parseObjectArray = function() {
      var i, item, itemsInObj, j, klass, numItems, obj, _i, _j;
      numItems = this.file.readInt();
      klass = this.parseClass();
      itemsInObj = this.file.readInt();
      obj = [];
      for (i = _i = 0; 0 <= numItems ? _i < numItems : _i > numItems; i = 0 <= numItems ? ++_i : --_i) {
        item = [];
        for (j = _j = 0; 0 <= itemsInObj ? _j < itemsInObj : _j > itemsInObj; j = 0 <= itemsInObj ? ++_j : --_j) {
          item.push(this.parseObjectArray());
        }
        obj.push(item);
      }
      return obj;
    };

    PSDDescriptor.prototype.parseObjectArray = function() {
      var i, id, num, type, unitID, values, _i;
      id = this.parseID();
      type = this.file.readString(4);
      unitID = this.file.readString();
      num = this.file.readInt();
      values = [];
      for (i = _i = 0; 0 <= num ? _i < num : _i > num; i = 0 <= num ? ++_i : --_i) {
        values.push(this.file.readDouble());
      }
      return values;
    };

    PSDDescriptor.prototype.parseRawData = function() {
      var len;
      len = this.file.readInt();
      return this.file.read(len);
    };

    PSDDescriptor.prototype.parseReference = function() {
      var form, klass, value;
      form = this.file.readString(4);
      klass = this.parseClass();
      value = (function() {
        switch (form) {
          case "Clss":
            return null;
          case "Enmr":
            return this.parseEnum();
          case "Idnt":
            return this.parseIdentifier();
          case "indx":
            return this.parseIndex();
          case "name":
            return this.file.readUnicodeString();
          case "rele":
            return this.parseOffset();
          case "prop":
            return this.parseProperty();
        }
      }).call(this);
      return value;
    };

    PSDDescriptor.prototype.parseUnitDouble = function() {
      var unit, unitID, value;
      unitID = this.file.readString(4);
      unit = (function() {
        switch (unitID) {
          case "#Ang":
            return "Angle";
          case "#Rsl":
            return "Density";
          case "#Rlt":
            return "Distance";
          case "#Nne":
            return "None";
          case "#Prc":
            return "Percent";
          case "#Pxl":
            return "Pixels";
          case "#Mlm":
            return "Millimeters";
          case "#Pnt":
            return "Points";
        }
      })();
      value = this.file.readDouble();
      return {
        id: unitID,
        unit: unit,
        value: value
      };
    };

    return PSDDescriptor;

  })();

  module.exports = PSDDescriptor;

}).call(this);
