// Generated by CoffeeScript 1.6.1
(function() {
  var Util,
    __hasProp = {}.hasOwnProperty;

  Util = (function() {

    function Util() {}

    Util.pad2 = function(i) {
      return Math.floor((i + 1) / 2) * 2;
    };

    Util.pad4 = function(i) {
      return i - (i % 4) + 3;
    };

    Util.toUInt16 = function(b1, b2) {
      return (b1 << 8) | b2;
    };

    Util.toInt16 = function(b1, b2) {
      var val;
      val = this.toUInt16(b1, b2);
      if (val >= 0x8000) {
        return val - 0x10000;
      } else {
        return val;
      }
    };

    Util.round = function(num, sigFig) {
      var mult;
      if (sigFig == null) {
        sigFig = 2;
      }
      if (sigFig === 0) {
        return Math.round(num);
      }
      mult = Math.pow(10, sigFig);
      return Math.round(num * mult) / mult;
    };

    Util.clamp = function(num, min, max) {
      var i, val, _i, _len;
      if (min == null) {
        min = Number.MIN_VALUE;
      }
      if (max == null) {
        max = Number.MAX_VALUE;
      }
      if (typeof num === "object" && (num.length != null)) {
        for (i = _i = 0, _len = num.length; _i < _len; i = ++_i) {
          val = num[i];
          num[i] = Math.max(Math.min(val, max), min);
        }
      } else if (typeof num === "object") {
        for (i in num) {
          if (!__hasProp.call(num, i)) continue;
          val = num[i];
          num[i] = Math.max(Math.min(val, max), min);
        }
      } else {
        num = Math.max(Math.min(num, max), min);
      }
      return num;
    };

    Util.decodeMacroman = (function() {
      var high_chars_unicode;
      high_chars_unicode = '\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\n\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\n\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\n\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\n\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\n\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\n\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\n\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u00e6\u00f8\n\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\n\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\n\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\n\u00ff\u0178\u2044\u20ac\u2039\u203a\ufb01\ufb02\n\u2021\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\n\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\n\uf8ff\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\n\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7'.replace(/\n/g, '');
      return function(byte_array) {
        var byte, char_array, idx;
        char_array = (function() {
          var _i, _len, _results;
          _results = [];
          for (idx = _i = 0, _len = byte_array.length; _i < _len; idx = ++_i) {
            byte = byte_array[idx];
            if (byte < 0x80) {
              _results.push(String.fromCharCode(byte));
            } else {
              _results.push(high_chars_unicode.charAt(byte - 0x80));
            }
          }
          return _results;
        })();
        return char_array.join('');
      };
    })();

    Util.zeroFill = function(number, width) {
      if (width == null) {
        width = 2;
      }
      width -= number.toString().length - /\./.test(number);
      if (width > 0) {
        return new Array(width + 1).join('0') + number;
      }
      return number + "";
    };

    return Util;

  })();

  module.exports = Util;

}).call(this);
